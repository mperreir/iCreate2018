using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class SoundRecognitionScript : MonoBehaviour
{
    // Fields
    AudioSource[] clips;    // List of all the AudioClips loaded in the scene
    float[][] spectrums;    // Spectrums of the clips
    float[] means;          // Means of the values of all the spectrums
    float[] vars;           // Variances of the values of the spectrums
    string[] devices;       // List of all the microphones
    AudioSource mic;        // Contains the AudioClip generated by listening to the microphone

    public Controler controler;

    // Use this for initialization
    void Start()
    {
        clips = new AudioSource[15];
        spectrums = new float[15][];
        means = new float[15];
        vars = new float[15];
        GetClips();
        GetClipsSpectrum();
        AnalyseClips();

        devices = Microphone.devices;
        mic = GetComponent<AudioSource>();
        mic.clip = Microphone.Start(devices[0], true, 10000, 44100);
        mic.Play();
    }

    // Update is called once per frame
    void Update()
    {
        //AudioSource a = GetComponent<AudioSource>();
        //a.clip = Microphone.Start("Microphone (Realtek High Definition Audio)", false, 1, 44100);
        //Recognize(a);

        Recognize(mic);
    }

    // Getting one of the prerecorded clips
    AudioSource GetClip(string fileName)
    {
        AudioClip ac = Resources.Load(fileName) as AudioClip;
        AudioSource a = gameObject.AddComponent<AudioSource>();
        a.volume = 0;
        a.clip = ac;
        return a;
    }

    void GetClips()
    {
        clips[0] = GetClip("Sounds/doigt1");
        clips[1] = GetClip("Sounds/doigt2");
        clips[2] = GetClip("Sounds/doigt3");
        clips[3] = GetClip("Sounds/doigt4");
        clips[4] = GetClip("Sounds/doigt5");
        clips[5] = GetClip("Sounds/main1");
        clips[6] = GetClip("Sounds/main2");
        clips[7] = GetClip("Sounds/main3");
        clips[8] = GetClip("Sounds/main4");
        clips[9] = GetClip("Sounds/main5");
        clips[10] = GetClip("Sounds/prout1");
        clips[11] = GetClip("Sounds/prout2");
        clips[12] = GetClip("Sounds/prout3");
        clips[13] = GetClip("Sounds/prout4");
        clips[14] = GetClip("Sounds/prout5");
    }

    // Computing spectrums of the prerecorded clips
    void GetClipsSpectrum()
    {
        int l = clips.Length;
        for (int i = 0; i < l; i++)
        {
            spectrums[i] = new float[256];
            clips[i].Play();
            clips[i].clip.GetData(spectrums[i], 0);

        }
    }

    // Mean + vars of the prerecorded clips
    void AnalyseClips()
    {
        // Means
        int l = spectrums.Length;
        for (int i = 0; i < l; i++)
        {
            means[i] = Mean(spectrums[i]);
            vars[i] = Var(spectrums[i]);
            print(means[i] + " " + vars[i]);
        }
    }

    // Mean of the values of a float array
    float Mean(float[] t)
    {
        int l = t.Length;
        float sum = 0;
        for (int i = 0; i < l; i++)
        {
            sum += t[i];
        }
        return sum / l;
    }

    // Var of the values of a float array
    float Var(float[] t)
    {
        int l = t.Length;
        float m = Mean(t);
        float[] temp = new float[l];
        for (int i = 0; i < l; i++)
        {
            temp[i] = (t[i] - m) * (t[i] - m);
        }
        return Mean(temp);
    }

    // Distance (euclidian) between two points
    float Dist(float a1, float a2, float b1, float b2)
    {
        return Mathf.Sqrt((a1 - b1) * (a1 - b1) + (a2 - b2) * (a2 - b2));
    }

    // Trying to recognise a sound from the microphone
    void Recognize(AudioSource a)
    {
        // Analyse signal
        float[] spec = new float[8192];
        a.GetSpectrumData(spec, 0, FFTWindow.Rectangular);
        float m = Mean(spec);
        float v = Var(spec);

        // Comparison with prerecorded sounds
        float[] dists = new float[clips.Length];
        for (int i = 0; i < clips.Length; i++)
        {
            dists[i] = Dist(m * 1000000, v * 1000000, means[i] * 1000000, vars[i] * 1000000);
        }
        float min = float.PositiveInfinity;
        int minId = 0;
        for (int i = 0; i < clips.Length; i++)
        {
            if (dists[i] < min)
            {
                minId = i;
                min = dists[i];
            }
        }

        // Recognition
        switch (minId)
        {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                if (min < 15)
                {
                    controler.KeyAction();
                }
                break;
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
                if (min < 15) print("Main " + min + " " + (minId - 5));
                break;
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
                if (min < 15) print("Prout " + min + " " + (minId - 10));
                break;
            default:
                break;
        }
    }

    void PrintTab(float[] t)
    {
        int l = t.Length;
        string res = "";
        for (int i = 0; i < l; i++)
        {
            res += "[" + t[i] + "]";
        }
        print(res);
    }
}